plugins {
    id 'org.springframework.boot' version '2.6.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'java'
    id 'jacoco'
}

group = 'com'
version = 'v1.0.0'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

jacoco {
    toolVersion = '0.8.7'
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

//    implementation 'org.flywaydb:flyway-core'
    runtimeOnly 'mysql:mysql-connector-java'
    runtimeOnly 'com.h2database:h2'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'io.rest-assured:rest-assured'

    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    implementation 'io.jsonwebtoken:jjwt:0.9.1'

    implementation 'io.awspring.cloud:spring-cloud-starter-aws:2.3.1'
}

processResources.dependsOn('copySecret')

task copySecret(type: Copy) {
    from './security'
    into 'src/main/resources/'
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        html.enabled true
        xml.enabled true
        csv.enabled false

        html.destination file("src/jacoco/jacoco.html")
        xml.destination file("src/jacoco/jacoco.xml")
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: [
                            '**/*GolfieApplication*',
                            '**/auth/infrastructure/kakao',
                            '**/auth/infrastructure/naver',
                            '**/*Dto*',
                            '**/*Response*',
                            '**/*Request*',
                            '**/*Exception*',
                            '**/*Error*',
                            '**/*s3*',
                    ])
        }))
    }

    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            enabled = true

            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.65
            }

            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.65
            }

            excludes = [
                    '**.*GolfieApplication*',
                    '**.*Kakao*',
                    '**.Profile',
                    '**.*Naver*',
                    '**.*Dto*',
                    '**.*Response*',
                    '**.*Request*',
                    '**.*User*',
                    '**.*Exception*',
                    '**.*Error*',
                    '**.s3.**',
                    '**.BaseTimeEntity',
                    '**.database.**',
            ]

        }
    }
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

task copyDocument(type: Copy) {
    dependsOn 'asciidoctor'
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

bootJar {
    dependsOn copyDocument
    copy {
        from "${asciidoctor.outputDir}"
        into 'BOOT-INF/classes/static/docs'
    }
}